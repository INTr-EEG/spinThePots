<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="['imgs\\star.png', 'imgs\\sort-btn.png', 'imgs\\end-btn.png', 'imgs\\empty-box.png', 'imgs\\pot1.png', 'imgs\\pot2.png', 'imgs\\pot3.png', 'imgs\\pot4.png', 'imgs\\pot5.png', 'imgs\\pot6.png', 'imgs\\pot7.png', 'imgs\\pot8.png', 'imgs\\spin-btn.png', 'imgs\\turntable.png']" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="spinThePots" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="spin">
      <CodeComponent name="spin_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="SPIN_DUR = 4;&amp;#10;SPEED_MULTIPLER = 3;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;SPIN_DUR = 4  # Seconds&amp;#10;SPEED_MULTIPLER = 3&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;# Quadratic equation: y = at(b-t)&amp;#10;shift = SPEED_MULTIPLER * t * (SPIN_DUR - t)&amp;#10;&amp;#10;for i in range(N_POTS):&amp;#10;    pot_angles[i] += shift&amp;#10;    pots[i].pos = deg2xy(pot_angles[i], RADIUS)&amp;#10;&amp;#10;&quot;&quot;&quot;PsychoPy and PsychoJS have opposite directions &amp;#10;for angular displacement. We make it work for &amp;#10;PsychoJS here. If you wish to run the PsychoPy &amp;#10;version, change 'Auto-&gt;JS' to 'Both' and uncomment &amp;#10;the appropriate line below.&quot;&quot;&quot;&amp;#10;&amp;#10;turntable.ori = (turntable.ori - shift)  # PsychoJS&amp;#10;#turntable.ori = (turntable.ori + shift)  # PsychoPy&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="shift = ((SPEED_MULTIPLER * t) * (SPIN_DUR - t));&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_POTS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    pot_angles[i] += shift;&amp;#10;    pots[i].pos = deg2xy(pot_angles[i], RADIUS);&amp;#10;}&amp;#10;/*PsychoPy and PsychoJS have opposite directions&amp;#10;for angular displacement. We make it work for&amp;#10;PsychoJS here. If you wish to run the PsychoPy&amp;#10;version, change 'Auto-&gt;JS' to 'Both' and uncomment&amp;#10;the appropriate line below.*/&amp;#10;turntable.ori = (turntable.ori - shift);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="for (var sticker, _pj_c = 0, _pj_a = stickers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    sticker = _pj_a[_pj_c];&amp;#10;    for (var pot, _pj_f = 0, _pj_d = pots, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        pot = _pj_d[_pj_f];&amp;#10;        if ((pot.content === sticker.name)) {&amp;#10;            sticker.pos = pot.pos;&amp;#10;            break;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_POTS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    pots[i].blank = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `blank${(i + 1)}`, &quot;image&quot;: `imgs/empty-box.png`, &quot;pos&quot;: pots[i].pos, &quot;size&quot;: 0.05, &quot;opacity&quot;: 1.0});&amp;#10;}&amp;#10;end_button = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;end_button&quot;, &quot;image&quot;: &quot;imgs/end-btn.png&quot;, &quot;pos&quot;: [0, (- 0.4)], &quot;size&quot;: [0, 0]});&amp;#10;end_button.autoDraw = true;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;# Update sticker positions after spin ends&amp;#10;for sticker in stickers:&amp;#10;    for pot in pots:&amp;#10;        if pot.content == sticker.name:&amp;#10;            sticker.pos = pot.pos&amp;#10;            break&amp;#10;&amp;#10;for i in range(N_POTS):&amp;#10;    pots[i].blank = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=f&quot;blank{i + 1}&quot;,&amp;#10;        image=f&quot;imgs/empty-box.png&quot;,&amp;#10;        pos=pots[i].pos,&amp;#10;        size=0.05,&amp;#10;        opacity=1.0&amp;#10;    )&amp;#10;&amp;#10;end_button = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name=&quot;end_button&quot;,&amp;#10;    image=&quot;imgs/end-btn.png&quot;,&amp;#10;    pos=(0, -0.4),&amp;#10;    size=(0, 0)&amp;#10;)&amp;#10;end_button.autoDraw = True&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="spin_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="spin_timer">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="spin_timer" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.5, -0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="SPIN_DUR" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="place">
      <CodeComponent name="place_code">
        <Param name="Before Experiment" updates="constant" val="&amp;#10;def deg2xy(deg, radius):&amp;#10;    &quot;&quot;&quot;Convert polar (angle in degrees) to &amp;#10;    Cartesian coordinates.&amp;#10;    &quot;&quot;&quot;&amp;#10;    rad, = (deg * pi / 180),&amp;#10;    x, y = radius * sin(rad),  radius * cos(rad)&amp;#10;    return x, y&amp;#10;&amp;#10;def dxdy(a, b):&amp;#10;    &quot;&quot;&quot;Calculate the x and y displacements &amp;#10;    between objects a and b (b as reference).&amp;#10;    &quot;&quot;&quot;&amp;#10;    dx, dy = a[0] - b[0],  a[1] - b[1]&amp;#10;    return dx, dy&amp;#10;&amp;#10;def dist2(p, q):&amp;#10;    &quot;&quot;&quot;Calculate the square of the distance &amp;#10;    between objects a and b.&amp;#10;    &quot;&quot;&quot;&amp;#10;    dx, dy = dxdy(p, q)&amp;#10;    return dx * dx + dy * dy&amp;#10;&amp;#10;def snapped(a, b, thresh2=THRESH2):&amp;#10;    &quot;&quot;&quot;Check if an object a is close enough to &amp;#10;    another object b. If yes, move object a to &amp;#10;    object b's position and return True. If no, &amp;#10;    return False.&amp;#10;    &quot;&quot;&quot;&amp;#10;    if dist2(a.pos, b.pos) &lt;= thresh2:&amp;#10;        a.pos = b.pos&amp;#10;        return True&amp;#10;    return False&amp;#10;&amp;#10;def repelled(a, b, r=0.1, thresh2=THRESH2):&amp;#10;    &quot;&quot;&quot;Check if an object a is too close to &amp;#10;    another object b. If yes, move object a away &amp;#10;    from object b and return True. If no, return &amp;#10;    False.&amp;#10;    &quot;&quot;&quot;&amp;#10;    d2, = dist2(a.pos, b.pos),&amp;#10;    if d2 &gt; 0 and d2 &lt;= thresh2:&amp;#10;        ratio, = (r / sqrt(d2)),&amp;#10;        dx, dy = dxdy(a.pos, b.pos)&amp;#10;        di, dj = ratio * dx, ratio * dy&amp;#10;        i, j = b.pos&amp;#10;        a.pos = (i + di, j + dj)&amp;#10;        return True&amp;#10;    return False&amp;#10;&amp;#10;def linear_coords(start, end, n):&amp;#10;    &quot;&quot;&quot;Generate a list of (x, y) coordinates along &amp;#10;    a line from start to end over n frames.&amp;#10;    &quot;&quot;&quot;&amp;#10;    x0, x1 = start[0], end[0]&amp;#10;    y0, y1 = start[1], end[1]&amp;#10;    dx, dy = (x1 - x0) / n, (y1 - y0) / n&amp;#10;    xys, = [],&amp;#10;    for i in range(n):&amp;#10;        xys.append((x0 + dx * i, y0 + dy * i))&amp;#10;    return xys&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="function deg2xy(deg, radius) {&amp;#10;    /*Convert polar (angle in degrees) to&amp;#10;    Cartesian coordinates.&amp;#10;    */&amp;#10;    var rad, x, y;&amp;#10;    [rad] = [((deg * pi) / 180)];&amp;#10;    [x, y] = [(radius * Math.sin(rad)), (radius * Math.cos(rad))];&amp;#10;    return [x, y];&amp;#10;}&amp;#10;function dxdy(a, b) {&amp;#10;    /*Calculate the x and y displacements&amp;#10;    between objects a and b (b as reference).&amp;#10;    */&amp;#10;    var dx, dy;&amp;#10;    [dx, dy] = [(a[0] - b[0]), (a[1] - b[1])];&amp;#10;    return [dx, dy];&amp;#10;}&amp;#10;function dist2(p, q) {&amp;#10;    /*Calculate the square of the distance&amp;#10;    between objects a and b.&amp;#10;    */&amp;#10;    var dx, dy;&amp;#10;    [dx, dy] = dxdy(p, q);&amp;#10;    return ((dx * dx) + (dy * dy));&amp;#10;}&amp;#10;function snapped(a, b, thresh2 = THRESH2) {&amp;#10;    /*Check if an object a is close enough to&amp;#10;    another object b. If yes, move object a to&amp;#10;    object b's position and return True. If no,&amp;#10;    return False.&amp;#10;    */&amp;#10;    if ((dist2(a.pos, b.pos) &lt;= thresh2)) {&amp;#10;        a.pos = b.pos;&amp;#10;        return true;&amp;#10;    }&amp;#10;    return false;&amp;#10;}&amp;#10;function repelled(a, b, r = 0.1, thresh2 = THRESH2) {&amp;#10;    /*Check if an object a is too close to&amp;#10;    another object b. If yes, move object a away&amp;#10;    from object b and return True. If no, return&amp;#10;    False.&amp;#10;    */&amp;#10;    var d2, di, dj, dx, dy, i, j, ratio;&amp;#10;    [d2] = [dist2(a.pos, b.pos)];&amp;#10;    if (((d2 &gt; 0) &amp;&amp; (d2 &lt;= thresh2))) {&amp;#10;        [ratio] = [(r / Math.sqrt(d2))];&amp;#10;        [dx, dy] = dxdy(a.pos, b.pos);&amp;#10;        [di, dj] = [(ratio * dx), (ratio * dy)];&amp;#10;        [i, j] = b.pos;&amp;#10;        a.pos = [(i + di), (j + dj)];&amp;#10;        return true;&amp;#10;    }&amp;#10;    return false;&amp;#10;}&amp;#10;function linear_coords(start, end, n) {&amp;#10;    /*Generate a list of (x, y) coordinates along&amp;#10;    a line from start to end over n frames.&amp;#10;    */&amp;#10;    var dx, dy, x0, x1, xys, y0, y1;&amp;#10;    [x0, x1] = [start[0], end[0]];&amp;#10;    [y0, y1] = [start[1], end[1]];&amp;#10;    [dx, dy] = [((x1 - x0) / n), ((y1 - y0) / n)];&amp;#10;    [xys] = [[]];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(n), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        xys.push([(x0 + (dx * i)), (y0 + (dy * i))]);&amp;#10;    }&amp;#10;    return xys;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;SHOW_DEBUG = False&amp;#10;&amp;#10;N_POTS = 8&amp;#10;N_STICKERS = 6&amp;#10;TOTAL_ANIMATION_SECONDS = 3&amp;#10;&amp;#10;&quot;Length/Position have units of % screen height&quot;&amp;#10;RADIUS = 0.25&amp;#10;STICKER_X0 = 0.5&amp;#10;STICKER_Y0 = 0.25&amp;#10;&amp;#10;&quot;&quot;&quot;Snap and repel threshold&amp;#10;- Distance of 5% of screen from center of pot&amp;#10;- Why 5%: 'It looks about right'&quot;&quot;&quot;&amp;#10;THRESH2 = 0.05 * 0.05&amp;#10;&amp;#10;draggingInProgress = False&amp;#10;draggedObject = None&amp;#10;&amp;#10;# Size: 773 x 562 px&amp;#10;SORT_BUTTON_SIZE = (0.136, 0.1)&amp;#10;&amp;#10;# Size: 874 x 562 px&amp;#10;SPIN_BUTTON_SIZE = (0.156, 0.1)&amp;#10;&amp;#10;# Size: 732x x 562 px&amp;#10;END_BUTTON_SIZE = (0.13, 0.1)&amp;#10;&amp;#10;DEG_PER_POT = 360 / N_POTS&amp;#10;SEC_PER_STICKER = TOTAL_ANIMATION_SECONDS / N_STICKERS&amp;#10;N_FRAMES = int(SEC_PER_STICKER / frameDur)&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="SHOW_DEBUG = false;&amp;#10;N_POTS = 8;&amp;#10;N_STICKERS = 6;&amp;#10;TOTAL_ANIMATION_SECONDS = 3;&amp;#10;/* Length/Position have units of % screen height */&amp;#10;RADIUS = 0.25;&amp;#10;STICKER_X0 = 0.5;&amp;#10;STICKER_Y0 = 0.25;&amp;#10;/*Snap and repel threshold&amp;#10;- Distance of 5% of screen from center of pot&amp;#10;- Why 5%: 'It looks about right'*/&amp;#10;THRESH2 = (0.05 * 0.05);&amp;#10;draggingInProgress = false;&amp;#10;draggedObject = null;&amp;#10;SORT_BUTTON_SIZE = [0.136, 0.1];&amp;#10;SPIN_BUTTON_SIZE = [0.156, 0.1];&amp;#10;END_BUTTON_SIZE = [0.13, 0.1];&amp;#10;DEG_PER_POT = (360 / N_POTS);&amp;#10;SEC_PER_STICKER = (TOTAL_ANIMATION_SECONDS / N_STICKERS);&amp;#10;N_FRAMES = Number.parseInt((SEC_PER_STICKER / frameDur));&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="auto_sorting = false;&amp;#10;place_mouse_state = 0;&amp;#10;prev_place_mouse_state = 0;&amp;#10;sort_button = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;sort_button&quot;, &quot;image&quot;: &quot;imgs/sort-btn.png&quot;, &quot;pos&quot;: [0.5, (- 0.4)], &quot;size&quot;: SORT_BUTTON_SIZE});&amp;#10;sort_button.autoDraw = true;&amp;#10;spin_button = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;spin_button&quot;, &quot;image&quot;: &quot;imgs/spin-btn.png&quot;, &quot;pos&quot;: [0, (- 0.4)], &quot;size&quot;: [0, 0]});&amp;#10;spin_button.autoDraw = true;&amp;#10;turntable = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;turntable&quot;, &quot;image&quot;: &quot;imgs/turntable.png&quot;, &quot;pos&quot;: [0, 0], &quot;size&quot;: 0.65, &quot;opacity&quot;: 0.7});&amp;#10;turntable.autoDraw = true;&amp;#10;pots = [];&amp;#10;pot_angles = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_POTS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    pot_angles.push((i * DEG_PER_POT));&amp;#10;    pots.push(new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `pot${(i + 1)}`, &quot;image&quot;: `imgs/pot${(i + 1)}.png`, &quot;pos&quot;: deg2xy(pot_angles[i], RADIUS), &quot;size&quot;: 0.1}));&amp;#10;    pots.slice((- 1))[0].autoDraw = true;&amp;#10;    pots.slice((- 1))[0].content = null;&amp;#10;    pots.slice((- 1))[0].vis_t = null;&amp;#10;}&amp;#10;stickers = [];&amp;#10;sticker_coords = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_STICKERS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    sticker_coords.push([STICKER_X0, (STICKER_Y0 - (0.1 * i))]);&amp;#10;    stickers.push(new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `sticker${(i + 1)}`, &quot;image&quot;: `imgs/star.png`, &quot;pos&quot;: sticker_coords[i], &quot;size&quot;: 0.05}));&amp;#10;    stickers.slice((- 1))[0].autoDraw = true;&amp;#10;    stickers.slice((- 1))[0].location = null;&amp;#10;}&amp;#10;pot_idxs = [0, 1, 3, 4, 5, 6];&amp;#10;xyss = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_STICKERS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    xyss.push(linear_coords(stickers[i].pos, pots[pot_idxs[i]].pos, N_FRAMES));&amp;#10;}&amp;#10;start_frame = null;&amp;#10;idx = 0;&amp;#10;move_idx = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;auto_sorting = False&amp;#10;place_mouse_state = 0&amp;#10;prev_place_mouse_state = 0&amp;#10;&amp;#10;# Initialize sort button&amp;#10;sort_button = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name=&quot;sort_button&quot;,&amp;#10;    image=&quot;imgs/sort-btn.png&quot;,&amp;#10;    pos=(0.5, -0.4),&amp;#10;    size=SORT_BUTTON_SIZE&amp;#10;)&amp;#10;sort_button.autoDraw = True&amp;#10;&amp;#10;# Initialize spin button&amp;#10;spin_button = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name=&quot;spin_button&quot;,&amp;#10;    image=&quot;imgs/spin-btn.png&quot;,&amp;#10;    pos=(0, -0.4),&amp;#10;    size=(0, 0)&amp;#10;)&amp;#10;spin_button.autoDraw = True&amp;#10;&amp;#10;# Initialize turntable&amp;#10;turntable = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name=&quot;turntable&quot;,&amp;#10;    image=&quot;imgs/turntable.png&quot;,&amp;#10;    pos=(0, 0),&amp;#10;    size=0.65,&amp;#10;    opacity=0.7&amp;#10;)&amp;#10;turntable.autoDraw = True&amp;#10;&amp;#10;# Initialize pots&amp;#10;pots = []&amp;#10;pot_angles = []&amp;#10;for i in range(N_POTS):&amp;#10;    pot_angles.append(i * DEG_PER_POT)&amp;#10;    pots.append(visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=f&quot;pot{i + 1}&quot;,&amp;#10;        image=f&quot;imgs/pot{i + 1}.png&quot;,&amp;#10;        pos=deg2xy(pot_angles[i], RADIUS),&amp;#10;        size=0.1&amp;#10;    ))&amp;#10;    pots[-1].autoDraw = True&amp;#10;    pots[-1].content = None  # Try something new&amp;#10;    pots[-1].vis_t = None  # Try something new&amp;#10;&amp;#10;# Initialize stickers&amp;#10;stickers = []&amp;#10;sticker_coords = []&amp;#10;for i in range(N_STICKERS):&amp;#10;    sticker_coords.append((&amp;#10;        STICKER_X0,&amp;#10;        STICKER_Y0 - 0.1 * i,&amp;#10;    ))&amp;#10;    stickers.append(visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=f&quot;sticker{i + 1}&quot;,&amp;#10;        image=f&quot;imgs/star.png&quot;,&amp;#10;        pos=sticker_coords[i],&amp;#10;        size=0.05&amp;#10;    ))&amp;#10;    stickers[-1].autoDraw = True&amp;#10;    stickers[-1].location = None  # Try something new&amp;#10;&amp;#10;# Generate animation coordinates&amp;#10;pot_idxs = [0, 1, 3, 4, 5, 6]&amp;#10;xyss = []&amp;#10;for i in range(N_STICKERS):&amp;#10;    xyss.append(linear_coords(stickers[i].pos, pots[pot_idxs[i]].pos, N_FRAMES))&amp;#10;&amp;#10;start_frame = None&amp;#10;idx = 0&amp;#10;move_idx = 0&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;# Real-time update so we don't have to keep track of every scenario&amp;#10;stickers_left = 0&amp;#10;for sticker in stickers:&amp;#10;    if sticker.location is None:&amp;#10;        stickers_left += 1&amp;#10;&amp;#10;if stickers_left &lt; 1:&amp;#10;    spin_button.size = SPIN_BUTTON_SIZE&amp;#10;    sort_button.size = (0, 0)&amp;#10;else:&amp;#10;    spin_button.size = (0, 0)&amp;#10;    sort_button.size = SORT_BUTTON_SIZE&amp;#10;&amp;#10;if auto_sorting:&amp;#10;    if move_idx &lt; N_STICKERS:&amp;#10;        idx = frameN - start_frame - 1&amp;#10;        stickers[move_idx].pos = xyss[move_idx][idx]&amp;#10;        if idx + 1 &gt;= len(xyss[move_idx]):&amp;#10;            if snapped(stickers[move_idx], pots[pot_idxs[move_idx]]):&amp;#10;                stickers[move_idx].location = pots[pot_idxs[move_idx]].name&amp;#10;                pots[pot_idxs[move_idx]].content = stickers[move_idx].name&amp;#10;            move_idx += 1&amp;#10;            start_frame = frameN&amp;#10;    else:&amp;#10;        # Reset to allow auto-sort again&amp;#10;        auto_sorting = False&amp;#10;        move_idx = 0&amp;#10;elif draggingInProgress:&amp;#10;    # draggedObject is guaranteed to be something&amp;#10;    if place_mouse.getPressed()[0] == 1:&amp;#10;        draggedObject.pos = place_mouse.getPos()&amp;#10;    else:&amp;#10;        # 'Drop' part (of drag and drop)&amp;#10;        draggingInProgress = False&amp;#10;        for pot in pots:&amp;#10;            if pot.content is None:&amp;#10;                # Check if sticker should be snapped&amp;#10;                if snapped(draggedObject, pot):&amp;#10;                    pot.content = draggedObject.name&amp;#10;                    draggedObject.location = pot.name&amp;#10;                    break&amp;#10;            else:&amp;#10;                # Check if sticker should be repelled&amp;#10;                if repelled(draggedObject, pot):&amp;#10;                    break&amp;#10;else:&amp;#10;    # Check if dragging should be in progress&amp;#10;    for sticker in stickers:&amp;#10;        if place_mouse.isPressedIn(sticker):&amp;#10;            draggingInProgress = True&amp;#10;            draggedObject = sticker&amp;#10;            sticker.location = None&amp;#10;            for pot in pots:&amp;#10;                if pot.content == sticker.name:&amp;#10;                    pot.content = None&amp;#10;                    break&amp;#10;    if not draggingInProgress:&amp;#10;        # Check if auto-sort is called&amp;#10;        place_mouse_state = place_mouse.getPressed()[0]&amp;#10;        if prev_place_mouse_state != place_mouse_state:&amp;#10;            prev_place_mouse_state = place_mouse_state&amp;#10;            if place_mouse_state == 1:&amp;#10;                if sort_button.contains(place_mouse):&amp;#10;                    auto_sorting = True&amp;#10;                    start_frame = frameN&amp;#10;                    # Reset all before auto-sort&amp;#10;                    for pot in pots:&amp;#10;                        pot.content = None&amp;#10;                    for sticker in stickers:&amp;#10;                        sticker.location = None&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    place_disp.text = f&quot;&quot;&quot;&amp;#10;stickers_left = {stickers_left}&amp;#10;{stickers[0].name}.location = {stickers[0].location}&amp;#10;{stickers[1].name}.location = {stickers[1].location}&amp;#10;{stickers[2].name}.location = {stickers[2].location}&amp;#10;{stickers[3].name}.location = {stickers[3].location}&amp;#10;{stickers[4].name}.location = {stickers[4].location}&amp;#10;{stickers[5].name}.location = {stickers[5].location}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="stickers_left = 0;&amp;#10;for (var sticker, _pj_c = 0, _pj_a = stickers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    sticker = _pj_a[_pj_c];&amp;#10;    if ((sticker.location === null)) {&amp;#10;        stickers_left += 1;&amp;#10;    }&amp;#10;}&amp;#10;if ((stickers_left &lt; 1)) {&amp;#10;    spin_button.size = SPIN_BUTTON_SIZE;&amp;#10;    sort_button.size = [0, 0];&amp;#10;} else {&amp;#10;    spin_button.size = [0, 0];&amp;#10;    sort_button.size = SORT_BUTTON_SIZE;&amp;#10;}&amp;#10;if (auto_sorting) {&amp;#10;    if ((move_idx &lt; N_STICKERS)) {&amp;#10;        idx = ((frameN - start_frame) - 1);&amp;#10;        stickers[move_idx].pos = xyss[move_idx][idx];&amp;#10;        if (((idx + 1) &gt;= xyss[move_idx].length)) {&amp;#10;            if (snapped(stickers[move_idx], pots[pot_idxs[move_idx]])) {&amp;#10;                stickers[move_idx].location = pots[pot_idxs[move_idx]].name;&amp;#10;                pots[pot_idxs[move_idx]].content = stickers[move_idx].name;&amp;#10;            }&amp;#10;            move_idx += 1;&amp;#10;            start_frame = frameN;&amp;#10;        }&amp;#10;    } else {&amp;#10;        auto_sorting = false;&amp;#10;        move_idx = 0;&amp;#10;    }&amp;#10;} else {&amp;#10;    if (draggingInProgress) {&amp;#10;        if ((place_mouse.getPressed()[0] === 1)) {&amp;#10;            draggedObject.pos = place_mouse.getPos();&amp;#10;        } else {&amp;#10;            draggingInProgress = false;&amp;#10;            for (var pot, _pj_c = 0, _pj_a = pots, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                pot = _pj_a[_pj_c];&amp;#10;                if ((pot.content === null)) {&amp;#10;                    if (snapped(draggedObject, pot)) {&amp;#10;                        pot.content = draggedObject.name;&amp;#10;                        draggedObject.location = pot.name;&amp;#10;                        break;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if (repelled(draggedObject, pot)) {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        for (var sticker, _pj_c = 0, _pj_a = stickers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            sticker = _pj_a[_pj_c];&amp;#10;            if (place_mouse.isPressedIn(sticker)) {&amp;#10;                draggingInProgress = true;&amp;#10;                draggedObject = sticker;&amp;#10;                sticker.location = null;&amp;#10;                for (var pot, _pj_f = 0, _pj_d = pots, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                    pot = _pj_d[_pj_f];&amp;#10;                    if ((pot.content === sticker.name)) {&amp;#10;                        pot.content = null;&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if ((! draggingInProgress)) {&amp;#10;            place_mouse_state = place_mouse.getPressed()[0];&amp;#10;            if ((prev_place_mouse_state !== place_mouse_state)) {&amp;#10;                prev_place_mouse_state = place_mouse_state;&amp;#10;                if ((place_mouse_state === 1)) {&amp;#10;                    if (sort_button.contains(place_mouse)) {&amp;#10;                        auto_sorting = true;&amp;#10;                        start_frame = frameN;&amp;#10;                        for (var pot, _pj_c = 0, _pj_a = pots, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                            pot = _pj_a[_pj_c];&amp;#10;                            pot.content = null;&amp;#10;                        }&amp;#10;                        for (var sticker, _pj_c = 0, _pj_a = stickers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                            sticker = _pj_a[_pj_c];&amp;#10;                            sticker.location = null;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    place_disp.text = `&amp;#10;stickers_left = ${stickers_left}&amp;#10;${stickers[0].name}.location = ${stickers[0].location}&amp;#10;${stickers[1].name}.location = ${stickers[1].location}&amp;#10;${stickers[2].name}.location = ${stickers[2].location}&amp;#10;${stickers[3].name}.location = ${stickers[3].location}&amp;#10;${stickers[4].name}.location = ${stickers[4].location}&amp;#10;${stickers[5].name}.location = ${stickers[5].location}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="for (var sticker, _pj_c = 0, _pj_a = stickers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    sticker = _pj_a[_pj_c];&amp;#10;    sticker.autoDraw = false;&amp;#10;}&amp;#10;spin_button.size = [0, 0];&amp;#10;spin_button.autoDraw = false;&amp;#10;sort_button.autoDraw = false;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;for sticker in stickers:&amp;#10;    sticker.autoDraw = False&amp;#10;&amp;#10;spin_button.size = (0, 0)&amp;#10;spin_button.autoDraw = False&amp;#10;sort_button.autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="place_code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="place_mouse">
        <Param name="clickable" updates="constant" val="spin_button" valType="list"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="place_mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <TextComponent name="place_disp">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="place_disp" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.5, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="trial_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;SHOW_DUR = 1.0  # Seconds&amp;#10;SHOW_END = False&amp;#10;END_EXPERIMENT = False&amp;#10;&amp;#10;write_current_row = False&amp;#10;trial_mouse_state = 0&amp;#10;prev_trial_mouse_state = 0&amp;#10;&amp;#10;chosen_pots = []&amp;#10;current_working_memory_score = 16&amp;#10;current_preservation_score = 0&amp;#10;stickers_found = 0&amp;#10;stickers_found_idx = 0&amp;#10;guesses_left = 16&amp;#10;&amp;#10;trial_num = None&amp;#10;sticker_names = []&amp;#10;sticker_locations = []&amp;#10;number_of_clicks = 0&amp;#10;time_to_first_click = None&amp;#10;time_to_last_click = None&amp;#10;pot_chosen = None&amp;#10;sticker_in_chosen_pot = None&amp;#10;trial_outcome = None&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="SHOW_DUR = 1.0;&amp;#10;SHOW_END = false;&amp;#10;END_EXPERIMENT = false;&amp;#10;write_current_row = false;&amp;#10;trial_mouse_state = 0;&amp;#10;prev_trial_mouse_state = 0;&amp;#10;chosen_pots = [];&amp;#10;current_working_memory_score = 16;&amp;#10;current_preservation_score = 0;&amp;#10;stickers_found = 0;&amp;#10;stickers_found_idx = 0;&amp;#10;guesses_left = 16;&amp;#10;trial_num = null;&amp;#10;sticker_names = [];&amp;#10;sticker_locations = [];&amp;#10;number_of_clicks = 0;&amp;#10;time_to_first_click = null;&amp;#10;time_to_last_click = null;&amp;#10;pot_chosen = null;&amp;#10;sticker_in_chosen_pot = null;&amp;#10;trial_outcome = null;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (END_EXPERIMENT) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    trial_num = (trials.thisRepN + 1);&amp;#10;    sticker_names = [];&amp;#10;    sticker_locations = [];&amp;#10;    for (var sticker, _pj_c = 0, _pj_a = stickers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        sticker = _pj_a[_pj_c];&amp;#10;        sticker_names.push(sticker.name);&amp;#10;        sticker_locations.push(sticker.location);&amp;#10;    }&amp;#10;    number_of_clicks = 0;&amp;#10;    time_to_first_click = null;&amp;#10;    time_to_last_click = null;&amp;#10;    pot_chosen = null;&amp;#10;    sticker_in_chosen_pot = null;&amp;#10;    trial_outcome = null;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if END_EXPERIMENT:&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    trial_num = trials.thisRepN + 1&amp;#10;&amp;#10;    # Record state at start of trial&amp;#10;    sticker_names = []&amp;#10;    sticker_locations = []&amp;#10;    for sticker in stickers:&amp;#10;        sticker_names.append(sticker.name)&amp;#10;        sticker_locations.append(sticker.location)&amp;#10;&amp;#10;    number_of_clicks = 0&amp;#10;    time_to_first_click = None&amp;#10;    time_to_last_click = None&amp;#10;    pot_chosen = None&amp;#10;    sticker_in_chosen_pot = None&amp;#10;    trial_outcome = None&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if not END_EXPERIMENT:&amp;#10;    if SHOW_END:&amp;#10;        # The only thing allowed here &amp;#10;        # is clicking the end button&amp;#10;        end_button.size = END_BUTTON_SIZE&amp;#10;        trial_mouse_state = trial_mouse.getPressed()[0]&amp;#10;        if prev_trial_mouse_state != trial_mouse_state:&amp;#10;            prev_trial_mouse_state = trial_mouse_state&amp;#10;            if trial_mouse_state == 1:&amp;#10;                if end_button.contains(trial_mouse):&amp;#10;                    END_EXPERIMENT = True&amp;#10;                    write_current_row = True&amp;#10;                    continueRoutine = False&amp;#10;    else:&amp;#10;        # Check if any click/tap took place&amp;#10;        trial_mouse_state = trial_mouse.getPressed()[0]&amp;#10;        if prev_trial_mouse_state != trial_mouse_state:&amp;#10;            prev_trial_mouse_state = trial_mouse_state&amp;#10;            if trial_mouse_state == 1:&amp;#10;                # A click/tap took place&amp;#10;                if number_of_clicks == 0:&amp;#10;                    time_to_first_click = t&amp;#10;                number_of_clicks += 1&amp;#10;                # Check if click/tap is on a pot&amp;#10;                for pot in pots:&amp;#10;                    if pot.contains(trial_mouse):&amp;#10;                        if pot.vis_t is None:&amp;#10;                            # Pot is clickable/tappable&amp;#10;                            guesses_left -= 1&amp;#10;                            time_to_last_click = t&amp;#10;                            pot_chosen = pot.name&amp;#10;                            # Update preservation score if &amp;#10;                            # pot has been chosen before&amp;#10;                            for chosen_pot in chosen_pots:&amp;#10;                                if pot.name == chosen_pot:&amp;#10;                                    current_preservation_score += 1&amp;#10;                                    break&amp;#10;                            chosen_pots.append(pot.name)&amp;#10;                            # Check trial outcome&amp;#10;                            if pot.content is None:&amp;#10;                                trial_outcome = &quot;wrong&quot;&amp;#10;                                current_working_memory_score -= 1&amp;#10;                            else:&amp;#10;                                trial_outcome = &quot;correct&quot;&amp;#10;                                sticker_in_chosen_pot = pot.content&amp;#10;                                stickers_found += 1&amp;#10;                                # Remove sticker's location, but retain pot's content&amp;#10;                                for sticker in stickers:&amp;#10;                                    if pot.content == sticker.name:&amp;#10;                                        sticker.location = None&amp;#10;                                        break&amp;#10;                            pot.vis_t = globalClock.getTime()&amp;#10;                            if trial_num &lt; 16 and stickers_found &lt; N_STICKERS:&amp;#10;                                write_current_row = True&amp;#10;                                continueRoutine = False&amp;#10;                            else:&amp;#10;                                SHOW_END = True&amp;#10;&amp;#10;    for pot in pots:&amp;#10;        # Check if something needs to be shown&amp;#10;        if pot.vis_t is not None:&amp;#10;            if globalClock.getTime() - pot.vis_t &lt; SHOW_DUR:&amp;#10;                if pot.content is None:&amp;#10;                    pot.blank.autoDraw = True&amp;#10;                else:&amp;#10;                    for sticker in stickers:&amp;#10;                        if pot.content == sticker.name:&amp;#10;                            sticker.autoDraw = True&amp;#10;                            break&amp;#10;            else:&amp;#10;                if pot.content is None:&amp;#10;                    pot.blank.autoDraw = False&amp;#10;                else:&amp;#10;                    # Move sticker to the side&amp;#10;                    for sticker in stickers:&amp;#10;                        if pot.content == sticker.name:&amp;#10;                            sticker.pos = sticker_coords[stickers_found_idx]&amp;#10;                            stickers_found_idx += 1&amp;#10;                            break&amp;#10;                    pot.content = None&amp;#10;                pot.vis_t = None&amp;#10;&amp;#10;    if SHOW_DEBUG:&amp;#10;        trial_disp.text = f&quot;&quot;&quot;&amp;#10;trial_num = {trial_num}&amp;#10;stickers_found = {stickers_found}&amp;#10;number_of_clicks = {number_of_clicks}&amp;#10;time_to_first_click = {round(time_to_first_click, 3)}&amp;#10;trial_mouse_state = {trial_mouse_state}&amp;#10;prev_trial_mouse_state = {prev_trial_mouse_state}&amp;#10;&quot;&quot;&quot;&amp;#10;    else:&amp;#10;        trial_disp.text = f&quot;Guesses left: {guesses_left}&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((! END_EXPERIMENT)) {&amp;#10;    if (SHOW_END) {&amp;#10;        end_button.size = END_BUTTON_SIZE;&amp;#10;        trial_mouse_state = trial_mouse.getPressed()[0];&amp;#10;        if ((prev_trial_mouse_state !== trial_mouse_state)) {&amp;#10;            prev_trial_mouse_state = trial_mouse_state;&amp;#10;            if ((trial_mouse_state === 1)) {&amp;#10;                if (end_button.contains(trial_mouse)) {&amp;#10;                    END_EXPERIMENT = true;&amp;#10;                    write_current_row = true;&amp;#10;                    continueRoutine = false;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        trial_mouse_state = trial_mouse.getPressed()[0];&amp;#10;        if ((prev_trial_mouse_state !== trial_mouse_state)) {&amp;#10;            prev_trial_mouse_state = trial_mouse_state;&amp;#10;            if ((trial_mouse_state === 1)) {&amp;#10;                if ((number_of_clicks === 0)) {&amp;#10;                    time_to_first_click = t;&amp;#10;                }&amp;#10;                number_of_clicks += 1;&amp;#10;                for (var pot, _pj_c = 0, _pj_a = pots, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    pot = _pj_a[_pj_c];&amp;#10;                    if (pot.contains(trial_mouse)) {&amp;#10;                        if ((pot.vis_t === null)) {&amp;#10;                            guesses_left -= 1;&amp;#10;                            time_to_last_click = t;&amp;#10;                            pot_chosen = pot.name;&amp;#10;                            for (var chosen_pot, _pj_f = 0, _pj_d = chosen_pots, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                                chosen_pot = _pj_d[_pj_f];&amp;#10;                                if ((pot.name === chosen_pot)) {&amp;#10;                                    current_preservation_score += 1;&amp;#10;                                    break;&amp;#10;                                }&amp;#10;                            }&amp;#10;                            chosen_pots.push(pot.name);&amp;#10;                            if ((pot.content === null)) {&amp;#10;                                trial_outcome = &quot;wrong&quot;;&amp;#10;                                current_working_memory_score -= 1;&amp;#10;                            } else {&amp;#10;                                trial_outcome = &quot;correct&quot;;&amp;#10;                                sticker_in_chosen_pot = pot.content;&amp;#10;                                stickers_found += 1;&amp;#10;                                for (var sticker, _pj_f = 0, _pj_d = stickers, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                                    sticker = _pj_d[_pj_f];&amp;#10;                                    if ((pot.content === sticker.name)) {&amp;#10;                                        sticker.location = null;&amp;#10;                                        break;&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                            pot.vis_t = globalClock.getTime();&amp;#10;                            if (((trial_num &lt; 16) &amp;&amp; (stickers_found &lt; N_STICKERS))) {&amp;#10;                                write_current_row = true;&amp;#10;                                continueRoutine = false;&amp;#10;                            } else {&amp;#10;                                SHOW_END = true;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    for (var pot, _pj_c = 0, _pj_a = pots, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        pot = _pj_a[_pj_c];&amp;#10;        if ((pot.vis_t !== null)) {&amp;#10;            if (((globalClock.getTime() - pot.vis_t) &lt; SHOW_DUR)) {&amp;#10;                if ((pot.content === null)) {&amp;#10;                    pot.blank.autoDraw = true;&amp;#10;                } else {&amp;#10;                    for (var sticker, _pj_f = 0, _pj_d = stickers, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                        sticker = _pj_d[_pj_f];&amp;#10;                        if ((pot.content === sticker.name)) {&amp;#10;                            sticker.autoDraw = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((pot.content === null)) {&amp;#10;                    pot.blank.autoDraw = false;&amp;#10;                } else {&amp;#10;                    for (var sticker, _pj_f = 0, _pj_d = stickers, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                        sticker = _pj_d[_pj_f];&amp;#10;                        if ((pot.content === sticker.name)) {&amp;#10;                            sticker.pos = sticker_coords[stickers_found_idx];&amp;#10;                            stickers_found_idx += 1;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                    pot.content = null;&amp;#10;                }&amp;#10;                pot.vis_t = null;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    if (SHOW_DEBUG) {&amp;#10;        trial_disp.text = `&amp;#10;trial_num = ${trial_num}&amp;#10;stickers_found = ${stickers_found}&amp;#10;number_of_clicks = ${number_of_clicks}&amp;#10;time_to_first_click = ${round(time_to_first_click, 3)}&amp;#10;trial_mouse_state = ${trial_mouse_state}&amp;#10;prev_trial_mouse_state = ${prev_trial_mouse_state}`&amp;#10;;&amp;#10;    } else {&amp;#10;        trial_disp.text = `Guesses left: ${guesses_left}`;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (write_current_row) {&amp;#10;    write_current_row = false;&amp;#10;    psychoJS.experiment.addData(&quot;trial_num&quot;, trial_num);&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(N_STICKERS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        psychoJS.experiment.addData(`${sticker_names[i]}_location`, sticker_locations[i]);&amp;#10;    }&amp;#10;    psychoJS.experiment.addData(&quot;number_of_clicks&quot;, number_of_clicks);&amp;#10;    psychoJS.experiment.addData(&quot;time_to_first_click&quot;, time_to_first_click);&amp;#10;    psychoJS.experiment.addData(&quot;time_to_last_click&quot;, time_to_last_click);&amp;#10;    psychoJS.experiment.addData(&quot;pot_chosen&quot;, pot_chosen);&amp;#10;    psychoJS.experiment.addData(&quot;sticker_in_chosen_pot&quot;, sticker_in_chosen_pot);&amp;#10;    psychoJS.experiment.addData(&quot;trial_outcome&quot;, trial_outcome);&amp;#10;    psychoJS.experiment.addData(&quot;current_working_memory_score&quot;, current_working_memory_score);&amp;#10;    psychoJS.experiment.addData(&quot;current_preservation_score&quot;, current_preservation_score);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if write_current_row:&amp;#10;    write_current_row = False&amp;#10;    thisExp.addData(&quot;trial_num&quot;, trial_num)&amp;#10;    for i in range(N_STICKERS):&amp;#10;        thisExp.addData(f&quot;{sticker_names[i]}_location&quot;, sticker_locations[i])&amp;#10;    thisExp.addData(&quot;number_of_clicks&quot;, number_of_clicks)&amp;#10;    thisExp.addData(&quot;time_to_first_click&quot;, time_to_first_click)&amp;#10;    thisExp.addData(&quot;time_to_last_click&quot;, time_to_last_click)&amp;#10;    thisExp.addData(&quot;pot_chosen&quot;, pot_chosen)&amp;#10;    thisExp.addData(&quot;sticker_in_chosen_pot&quot;, sticker_in_chosen_pot)&amp;#10;    thisExp.addData(&quot;trial_outcome&quot;, trial_outcome)&amp;#10;    thisExp.addData(&quot;current_working_memory_score&quot;, current_working_memory_score)&amp;#10;    thisExp.addData(&quot;current_preservation_score&quot;, current_preservation_score)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="trial_mouse">
        <Param name="clickable" updates="constant" val="pots[0], pots[1], pots[2], pots[3], pots[4], pots[5], pots[6], pots[7]" valType="list"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="trial_mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="on click" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <TextComponent name="trial_disp">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="trial_disp" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="place"/>
    <Routine name="spin"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="16" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
